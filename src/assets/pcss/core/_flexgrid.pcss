@import './_flexgrid-mixins.pcss';

/*****************************
* Extends
*****************************/
.gutters {
    @include gutters();
}

.margin-gutters {
    @include margin-gutters();
}

/*****************************
* Flexgrid classes
*****************************/
.container {
    @include gutters();
    position: relative;
    width: 100%;
    max-width: $container-width;
    margin-left: auto;
    margin-right: auto;
}

.flex {
    display: flex;
    flex: 1 1 auto;
}
.row {
    @include margin-gutters();
    display: flex;
    flex: 0 1 auto;

    /* TODO box-orient */

    flex-flow: row wrap;

    box-sizing: border-box;

    @each $dir in (row, col) {
        &.dir-$(dir) {
            flex-direction: $(dir);
        }

        &.dir-$(dir)-reverse {
            flex-direction: $(dir)-reverse;
        }
    }
}

.flex-no-wrap {
    -ms-flex-wrap: nowrap;
    flex-wrap: nowrap;
}

.no-gutters {
    padding-left: 0;
    padding-right: 0;
}

.no-margin-gutters {
    margin-left: 0;
    margin-right: 0;
}

[class*='col-'],
.col {
    @include gutters();
    box-sizing: border-box;

    &:not(.col-fixed) {
        flex: 0 1 auto;
    }
}

.col {
    max-width: 100%;
}

.col-fixed {
    flex: 1 0 auto;
}

@each $name in $breakpoints {
    @if $name == xs {
        @include generate-columns-and-utils($name);

        .hidden-from-xs {
            display: none !important;
        }
    } @else {
        @media (--from-$(name)) {
            @if $name != container {
                @include generate-columns-and-utils($name);
            }

            .hidden-from-$(name) {
                display: none !important;
            }
        }
    }
}

@each $name in $breakpoints {
    @media (--till-$(name)) {
        .hidden-till-$(name) {
            display: none !important;
        }
    }
}
